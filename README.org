
[[file:pics/carbs.webp]]

* CARBS (Version 0.3.0)
:PROPERTIES:
:CUSTOM_ID: carbs-version-0.3.0
:END:
In which you will find Chad Arch Random Bootstrap Scripts (CARBS).

This repo will allow to you setup a Arch Linux system in the only
possible correct way. Failing that it will at least try to suck as
little as possible.

* Who is this for
CARBS is made for the covertly slightly racist, moderately communist, totally
non-sexist GenX straight white corpcucked male coder. He identifies as a Linux and
Python vegan and you will respect his vi/vim pronouns. He may be of the opinion
that the patriarchy can't be worse than the alternative, but he never states the
obvious. He is tolerant of his brothers and sisters in the Church of the
config-curious.

Fork this repo for your own use, and adapt to your own sensibilities.

* What does it do
CARBS allows you to bootstrap a fresh Arch Linux environment into a comfy,
capable modern development environment, in a few minutes. It also allows you to
keep that config maintained and backed-up using git and gitops config as code
thinking, in a way your 1/4 century younger than your SCRUM-cuck master cannot
fathom.

* The basic plan
- Install Arch, typically using the latest ISO image from a [[https://www.ventoy.net/en/index.html][Ventoy]] enabled USB
  drive.
- Install bootstrap tooling on the fresh install, this necessary to /bootstrap/
  the CARBS config unto the target environment
- Use the bootstrap tools to install CARBS i.e. =git= and =make=
- Enjoy a comfy CARBSified compute environment
- Manage config drift over time in the CARBS git repo. The CARBS repo acts as
  both a config backup, and a source of quickly standing up a new CARBS enabled
  machine, fine tuned to your specific liking, no drama, no fuss.

* Acknowledge country
- There is some unavoidable bootstrapping that needs to happen to
  install core tooling, this is mostly =make= and =bash= managed.
- dotfiles are kept in, as far as possible, a 1:1 config folder and
  linked into place
- Linking is done using ansible
- All dependencies are managed using ansible
- Functionality is sorted into ansible roles

* Install
** Install Arch if you have not yet done so
- You will need a working network with access to the interwebs as a minimum.
- Install Arch on target machine using a ventoy USB drive for physical machines.
- Be sure to pick a networking solution and enable it, be it NetworkManager or
  systemd-networking. Its hard to install things of github if you don't have a
  working nic.
- Once the new machine has been provisioned and the networking is good, proceed.

** Install bootstrap tools
:PROPERTIES:
:CUSTOM_ID: install-bootstrap-tools
:END:
You will need at least one privileged user to install additional
packages, you can just as well use the root user you added during
install.

Make sure the admin user is in the wheel group, and use visudo to enable
=wheel= user privileges =visudo=, if you have neovim already installed,
=EDITOR=nvim visudo=

#+begin_example
%wheel ALL=(ALL) ALL
#+end_example

replace =carbsadmin= with your user

#+begin_example
USER=carbsadmin sudo useradd -m -G wheel -s /bin/bash $USER
#+end_example

And install the bootstrap tools, =git= and =make=

#+begin_src sh
sudo pacman -S make git
#+end_src

** Install CARBS
:PROPERTIES:
:CUSTOM_ID: install-carbs
:END:
Clone the CARBS repo, or your fork into =~/carbs=, and do =make carbs=

#+begin_example
git clone git@github.com:sthysel/carbs.git
cd carbs
make bootstrap
#+end_example

* The somewhat silly bootstrap dependency chain
:PROPERTIES:
:CUSTOM_ID: the-somewhat-silly-bootstrap-dependency-chain
:END:
We want to use =ansible= to manage everything. =ansible= is a Python tool but we
don't want to use system Python for that because the system Python belongs to
the system and we want to be isolated from when the system decides to change
it, as it does.

For that reason we want to use [[https://github.com/pyenv/pyenv][pyenv]] to install our user Python version of
choice, and use a [[https://github.com/pyenv/pyenv][pyenv]] provided Python for =pipx= to install =poetry=. =poetry=
is used to install =ansible=. We want to use =yay= to install =pyenv=, so the
system can take care of =pyenv= updates.

We want the Arch package management to take care of things that we don't want to
deal with, while managing the things we do care about ourselves.

So the CARBS tool dependency chain looks something like this:

yay -> pyenv -> pipx -> poetry -> ansible

In short, the bootstrap script will:

- install bootstrap yay using pacman
- re-install yay using yay
- install pyenv using yay
- install a global user Python using pyenv
- install pipx using the user Python
- install poetry using pipx
- install ansible using poetry

This will leave us with a somewhat well configured Python development
environment that isolates us from system Python with maximum flexibility and
little potential for dependency conflicts between development projects and
system Python dependencies.

Does it /need/ to be so seemingly convoluted just to install CARBS? No, but also
yes, because we install CARBS for a reason: to have a code dev environment, one
that supports the Python build system where it is today. The day will come when
its more straightforward, today is not that day.

What about docker, and lxc ? Do you even containerize bro ? All the time, bro,
but I don't /have/ to, and neither do you.

* Desktop fed on moist and delightfull CARBS
:PROPERTIES:
:CUSTOM_ID: desktop-fed-on-moist-and-delightfull-carbs
:END:
#+caption: CARBS
[[file:pics/iregretnothing.jpeg]]
